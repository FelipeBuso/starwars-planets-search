{"version":3,"sources":["star-wars-logo.png","context/SWContext.js","components/HeaderTable.jsx","components/RowTable.jsx","components/Filters.jsx","components/Table.jsx","services/Api.js","helpers/filter.js","helpers/order.js","context/SWProvider.js","App.js","index.js"],"names":["module","exports","SWContext","createContext","HeaderTable","className","RowTable","planet","data-testid","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","Filters","filters","htmlFor","type","onChange","e","handlerChangeName","value","filterName","saveOrderFilter","onClick","startOrder","src","logo","alt","Table","useContext","planets","savePlanets","isLoading","changeLoading","setFilters","planetsToFilter","saveFilteredPlanets","addFilterByNumericValue","addFilterByOrder","removeFilterByNumericValue","useState","setFilterName","useEffect","callback","fetch","then","results","json","data","catch","error","Error","column","comparison","numericValues","setNumericValues","filteredColumn","setFilteredColumn","saveNewFilterNumeric","filteredPlanetsBynumericValue","filter","parseFloat","filterPlanetsByNumericValues","columnsUsed","filterByNumericValues","map","unusedColumns","forEach","itemColumn","filterColumn","handlerNumericValues","target","prevState","index","setIndex","renderNumericFiltersApplied","i","key","filteredPlanetsByName","RegExp","test","sort","orderFilter","setOrderFilter","isOrdened","setIsOrdened","dataFilter","sortPlanetsByOrder","arrayOfPlanets","order","a","b","itemA","itemB","toLowerCase","SWProvider","children","setPlanets","filteredPlanets","setFilteredPlanets","setIsLoading","filterByName","arrayFilteredPlanets","sortedArrayFilteredPlanets","context","ordenedData","newFilter","newFilterNumeric","push","newFilterOrder","newFiltersNumeric","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6586e3f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.0202a998.png\";","import { createContext } from 'react';\n\nconst SWContext = createContext();\n\nexport default SWContext;\n","import React from 'react';\nimport '../styles/HeaderTable.css';\n\nexport default function HeaderTable() {\n  return (\n    <tr className=\"header-table-section\">\n      <th>name</th>\n      <th>rotation_period</th>\n      <th>orbital_period</th>\n      <th>diameter</th>\n      <th>climate</th>\n      <th>gravity</th>\n      <th>terrain</th>\n      <th>surface_water</th>\n      <th>population</th>\n      <th>films</th>\n      <th>created</th>\n      <th>edited</th>\n      <th>url</th>\n    </tr>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/RowTable.css';\n\nexport default function RowTable({ planet }) {\n  return (\n    <tr className=\"row-section\">\n      <td data-testid=\"planet-name\">{ planet.name }</td>\n      <td>{ planet.rotation_period }</td>\n      <td>{ planet.orbital_period }</td>\n      <td>{ planet.diameter }</td>\n      <td>{ planet.climate }</td>\n      <td>{ planet.gravity }</td>\n      <td>{ planet.terrain }</td>\n      <td>{ planet.surface_water }</td>\n      <td>{ planet.population }</td>\n      <td>{ planet.films }</td>\n      <td>{ planet.created }</td>\n      <td>{ planet.edited }</td>\n      <td>{ planet.url }</td>\n    </tr>\n  );\n}\n\nRowTable.propTypes = {\n  planet: PropTypes.shape({\n    name: PropTypes.string,\n    rotation_period: PropTypes.string,\n    orbital_period: PropTypes.string,\n    diameter: PropTypes.string,\n    climate: PropTypes.string,\n    gravity: PropTypes.string,\n    terrain: PropTypes.string,\n    surface_water: PropTypes.string,\n    population: PropTypes.string,\n    films: PropTypes.arrayOf(PropTypes.string),\n    created: PropTypes.string,\n    edited: PropTypes.string,\n    url: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Filters.css';\nimport logo from '../star-wars-logo.png';\n\nexport default function Filters({ filters }) {\n  return (\n    <div className=\"filter-top-section\">\n      <div className=\"filter-name-section\">\n        <label htmlFor=\"name-filter\">\n          Filter by name:\n          <input\n            type=\"text\"\n            data-testid=\"name-filter\"\n            onChange={ (e) => filters.handlerChangeName(e) }\n            value={ filters.filterName }\n          />\n        </label>\n      </div>\n      <div className=\"filter-order-section\">\n        <label htmlFor=\"column-sort\">\n          Order by :\n          <select\n            data-testid=\"column-sort\"\n            name=\"column\"\n            onChange={ (e) => filters.saveOrderFilter(e) }\n          >\n            <option value=\"name\">name</option>\n            <option value=\"rotation_period\">rotation_period</option>\n            <option value=\"orbital_period\">orbital_period</option>\n            <option value=\"diameter\">diameter</option>\n            <option value=\"surface_water\">surface_water</option>\n            <option value=\"population\">population</option>\n          </select>\n        </label>\n        <label htmlFor=\"column-sort-input-asc\">\n          ASC\n          <input\n            type=\"radio\"\n            name=\"sort\"\n            data-testid=\"column-sort-input-asc\"\n            value=\"ASC\"\n            onChange={ (e) => filters.saveOrderFilter(e) }\n          />\n        </label>\n        <label htmlFor=\"column-sort-input-desc\">\n          DESC\n          <input\n            type=\"radio\"\n            name=\"sort\"\n            data-testid=\"column-sort-input-desc\"\n            value=\"DESC\"\n            onChange={ (e) => filters.saveOrderFilter(e) }\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"column-sort-button\"\n          onClick={ () => filters.startOrder() }\n        >\n          Sort\n        </button>\n      </div>\n      <div className=\"logo-section\">\n        <img className=\"logo\" src={ logo } alt=\"logo star wars\" />\n        <span className=\"logo-planets\">PLANETS</span>\n      </div>\n\n    </div>\n  );\n}\n\nFilters.propTypes = {\n  filters: PropTypes.shape({\n    handlerChangeName: PropTypes.func,\n    saveOrderFilter: PropTypes.func,\n    startOrder: PropTypes.func,\n    filterName: PropTypes.string,\n  }).isRequired,\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport SWContext from '../context/SWContext';\nimport getPlanetsFromAPI from '../services/Api';\nimport HeaderTable from './HeaderTable';\nimport RowTable from './RowTable';\nimport Filters from './Filters';\nimport filterPlanetsByNumericValues from '../helpers/filter';\nimport '../styles/Table.css';\n\nexport default function Table() {\n  const {\n    planets,\n    savePlanets,\n    isLoading,\n    changeLoading,\n    filters,\n    setFilters,\n    planetsToFilter,\n    saveFilteredPlanets,\n    addFilterByNumericValue,\n    addFilterByOrder,\n    removeFilterByNumericValue,\n  } = useContext(SWContext);\n\n  const [filterName, setFilterName] = useState('');\n\n  function savePlanetsfromApi() {\n    changeLoading();\n    getPlanetsFromAPI(savePlanets);\n  }\n\n  useEffect(savePlanetsfromApi, []);\n\n  function filterPlanetsByName() {\n    const filteredPlanetsByName = planetsToFilter.filter((planet) => (\n      (new RegExp(filterName, 'i')).test(new RegExp(planet.name, 'i'))\n    ));\n    saveFilteredPlanets(filteredPlanetsByName);\n  }\n\n  const initialArrayColum = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  const initialNumericValues = {\n    column: 'population',\n    comparison: 'maior que',\n    value: '',\n  };\n\n  const [numericValues, setNumericValues] = useState(initialNumericValues);\n  const [filteredColumn, setFilteredColumn] = useState(initialArrayColum);\n\n  function filterColumn() {\n    const columnsUsed = filters.filterByNumericValues.map((filter) => filter.column);\n    let unusedColumns = [];\n    columnsUsed.forEach((column) => {\n      unusedColumns = filteredColumn.filter((itemColumn) => itemColumn !== column);\n    });\n    setFilteredColumn(unusedColumns);\n  }\n\n  function saveNewFilterNumeric() {\n    addFilterByNumericValue(numericValues);\n    const filteredPlanetsBynumericValue = filterPlanetsByNumericValues(\n      planets,\n      numericValues,\n    );\n    saveFilteredPlanets(filteredPlanetsBynumericValue);\n    filterColumn();\n  }\n\n  function handlerNumericValues({ target }) {\n    const { name, value } = target;\n    setNumericValues((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n  const [index, setIndex] = useState(null);\n\n  function setIndexRemove(indexFilter) {\n    setIndex(indexFilter);\n  }\n\n  function removeFilter() {\n    removeFilterByNumericValue(index);\n  }\n  useEffect(removeFilter, [index]);\n\n  useEffect(filterPlanetsByName, [filterName, planetsToFilter, index]);\n\n  function renderNumericFiltersApplied() {\n    return (\n      <div className=\"filters-applied-section\">\n        { filters.filterByNumericValues.map((filter, i) => (\n          <div data-testid=\"filter\" key={ i }>\n            <span>{ filter.column }</span>\n            <span>{ filter.comparison }</span>\n            <span>{ filter.value }</span>\n            <button\n              type=\"button\"\n              onClick={ () => setIndexRemove(i) }\n            >\n              X\n            </button>\n          </div>\n        )) }\n      </div>\n    );\n  }\n\n  function renderFilterNumericValues() {\n    return (\n      <div className=\"filter-numeric-section\">\n        <label htmlFor=\"column-filter\">\n          Filter by:\n\n          <select\n            name=\"column\"\n            data-testid=\"column-filter\"\n            onChange={ (e) => handlerNumericValues(e) }\n          >\n            { filteredColumn.map((column, i) => (\n              <option\n                key={ i }\n                value={ column }\n              >\n                { column }\n              </option>\n            ))}\n          </select>\n        </label>\n        <select\n          name=\"comparison\"\n          data-testid=\"comparison-filter\"\n          onChange={ (e) => handlerNumericValues(e) }\n        >\n          <option value=\"maior que\">maior que</option>\n          <option value=\"menor que\">menor que</option>\n          <option value=\"igual a\">igual a</option>\n        </select>\n        <input\n          type=\"number\"\n          data-testid=\"value-filter\"\n          name=\"value\"\n          onChange={ (e) => handlerNumericValues(e) }\n        />\n        <button\n          type=\"button\"\n          data-testid=\"button-filter\"\n          onClick={ () => saveNewFilterNumeric() }\n        >\n          Filtrar\n        </button>\n      </div>\n    );\n  }\n\n  function handlerChangeName({ target }) {\n    const { value } = target;\n    setFilterName(value);\n  }\n\n  function setFilterNameContext() {\n    setFilters(filterName);\n  }\n  useEffect(setFilterNameContext, [filterName]);\n\n  const [orderFilter, setOrderFilter] = useState({ column: 'name', sort: 'ASC' });\n  const [isOrdened, setIsOrdened] = useState(false);\n  function saveOrderFilter({ target }) {\n    const { name, value } = target;\n    setOrderFilter((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n  function updateContextFilterOrder() {\n    addFilterByOrder(orderFilter);\n    setIsOrdened(false);\n  }\n\n  function startOrder() {\n    setIsOrdened(true);\n  }\n  useEffect(updateContextFilterOrder, [isOrdened]);\n\n  const dataFilter = {\n    handlerChangeName,\n    saveOrderFilter,\n    startOrder,\n    filterName,\n  };\n\n  function renderTable() {\n    return (\n      <section>\n        <Filters filters={ dataFilter } />\n        <div className=\"filter-section\">\n          { renderFilterNumericValues() }\n          { renderNumericFiltersApplied() }\n        </div>\n        <table>\n          <thead>\n            <HeaderTable />\n          </thead>\n          <tbody>\n            { planets.map((planet, i) => <RowTable key={ i } planet={ planet } />) }\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n\n  return (\n    <div>\n      {\n        isLoading\n          ? <h3>carregando...</h3>\n          : renderTable()\n      }\n    </div>\n  );\n}\n","export default function getPlanetsFromAPI(callback) {\n  const API_URL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n  fetch(API_URL)\n    .then((results) => results.json())\n    .then((data) => callback(data.results))\n    .catch((error) => new Error(error));\n}\n","export default function filterPlanetsByNumericValues(planets, numericValues) {\n  const { comparison, column, value } = numericValues;\n  switch (comparison) {\n  case 'maior que':\n    return (\n      planets.filter((planet) => (\n        parseFloat(planet[column]) > parseFloat(value)))\n    );\n  case 'menor que':\n    return (\n      planets.filter((planet) => (\n        parseFloat(planet[column]) < parseFloat(value)))\n    );\n  case 'igual a':\n    return (\n      planets.filter((planet) => (\n        parseFloat(planet[column]) === parseFloat(value)))\n    );\n  default:\n    break;\n  }\n}\n","export default function sortPlanetsByOrder(arrayOfPlanets, filters) {\n  const { order } = filters;\n  const { column, sort } = order;\n  function compare(a, b) {\n    let itemA;\n    let itemB;\n\n    if (column === 'name') {\n      itemA = a[column].toLowerCase();\n      itemB = b[column].toLowerCase();\n    } else {\n      itemA = parseFloat(a[column]);\n      itemB = parseFloat(b[column]);\n    }\n\n    const desc = -1;\n    let comparison = 0;\n    if (itemA > itemB) {\n      comparison = 1;\n    } else if (itemA < itemB) {\n      comparison = desc;\n    }\n    return sort === 'ASC' ? comparison : comparison * desc;\n  }\n  let sortedPlanets = [];\n  sortedPlanets = arrayOfPlanets.sort(compare);\n  return sortedPlanets;\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport SWContext from './SWContext';\nimport sortPlanetsByOrder from '../helpers/order';\n\nexport default function SWProvider({ children }) {\n  const initialStateFilters = {\n    filterByName: { name: '' },\n    filterByNumericValues: [],\n    order: { column: 'name', sort: 'ASC' },\n  };\n\n  const [planets, setPlanets] = useState([]);\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [filters, setFilters] = useState(initialStateFilters);\n\n  function savePlanets(data) {\n    const ordenedData = sortPlanetsByOrder(data, filters);\n    setPlanets(ordenedData);\n    setIsLoading(false);\n  }\n\n  function changeLoading() {\n    setIsLoading(true);\n  }\n\n  function changeFiltersByName(value) {\n    const newFilter = filters;\n    newFilter.filterByName.name = value;\n    setFilters(newFilter);\n  }\n\n  function addFilterByNumericValue(value) {\n    const newFilterNumeric = filters;\n    newFilterNumeric.filterByNumericValues.push(value);\n    setFilters(newFilterNumeric);\n  }\n\n  function saveFilteredPlanets(arrayFilteredPlanets) {\n    const sortedArrayFilteredPlanets = sortPlanetsByOrder(arrayFilteredPlanets, filters);\n    setFilteredPlanets(sortedArrayFilteredPlanets);\n  }\n\n  function addFilterByOrder(value) {\n    const newFilterOrder = filters;\n    newFilterOrder.order = value;\n    setFilters(newFilterOrder);\n    saveFilteredPlanets(filteredPlanets);\n  }\n\n  function removeFilterByNumericValue(index) {\n    const newFiltersNumeric = filters.filterByNumericValues.filter(\n      (filter, i) => i !== index,\n    );\n    const newFilter = filters;\n    newFilter.filterByNumericValues = newFiltersNumeric;\n    setFilters(newFilter);\n  }\n\n  const context = {\n    planets: filteredPlanets,\n    savePlanets,\n    isLoading,\n    changeLoading,\n    filters,\n    setFilters: changeFiltersByName,\n    planetsToFilter: planets,\n    saveFilteredPlanets,\n    addFilterByNumericValue,\n    addFilterByOrder,\n    removeFilterByNumericValue,\n  };\n\n  return (\n    <div>\n      <SWContext.Provider value={ context }>\n        { children }\n      </SWContext.Provider>\n    </div>\n  );\n}\n\nSWProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport SWProvider from './context/SWProvider';\n\nfunction App() {\n  return (\n    <SWProvider>\n      <Table />\n    </SWProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}